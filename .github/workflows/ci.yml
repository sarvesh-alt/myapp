name: Java CI with Gradle

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-java:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Echo message
        run: echo "Hi, I am from COSC 1209 class"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'  # AdoptOpenJDK still supports Java 8
          cache: 'gradle'
          java-package: 'jdk'
          check-latest: false
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true

      # Handle Windows-specific Gradle wrapper
      - name: Set Gradle wrapper permissions (Unix)
        if: runner.os != 'Windows'
        run: chmod +x gradlew

      # Build and test with Gradle (Windows)
      - name: Build and test with Gradle (Windows)
        if: runner.os == 'Windows'
        run: |
          ./gradlew.bat build
          ./gradlew.bat test
        shell: cmd

      # Build and test with Gradle (Unix)
      - name: Build and test with Gradle (Unix)
        if: runner.os != 'Windows'
        run: |
          ./gradlew build
          ./gradlew test
        shell: bash

      # Docker setup for each OS
      - name: Install Docker (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install --cask docker
          open /Applications/Docker.app
          timeout=60
          echo "Waiting for Docker to start..."
          while ! docker info > /dev/null 2>&1; do
            sleep 1
            timeout=$((timeout - 1))
            if [ $timeout -le 0 ]; then
              echo "Docker failed to start within timeout"
              exit 1
            fi
          done
          docker --version

      # Docker is pre-installed on Ubuntu runners
      - name: Verify Docker (Ubuntu)
        if: runner.os == 'Linux'
        run: docker --version

      # Docker Desktop for Windows
      - name: Verify Docker (Windows)
        if: runner.os == 'Windows'
        run: |
          docker --version
        shell: pwsh

      # Set up Docker Buildx (Skip for Windows)
      - name: Set up Docker Buildx
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and Push Docker image for Windows
      - name: Build and Push Docker image (Windows)
        if: runner.os == 'Windows'
        run: |
          docker build -t docker.io/sarveshalt/java-app:latest .
          docker push docker.io/sarveshalt/java-app:latest
        shell: pwsh

      # Build and Push Docker image for Unix systems
      - name: Build and Push Docker image (Unix)
        if: runner.os != 'Windows'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: docker.io/sarveshalt/java-app:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=docker.io/sarveshalt/java-app:buildcache
          cache-to: type=registry,ref=docker.io/sarveshalt/java-app:buildcache,mode=max